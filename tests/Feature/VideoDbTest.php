<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\Video;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class VideoDbTest extends TestCase
{
    private $video;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $attr = [
            'title' => $this->faker->title,
            'description' => $this->faker->sentence ,
            'year_launched' => $this->faker->year,
            'opened' => $this->faker->boolean,
            'duration' => rand(0,240),
            'rating' => Video::RATING_LIST[array_rand(Video::RATING_LIST)]
        ];

        $this->video = Video::create($attr);
    }

    /**
     * @test
     * @testdox Adding Video
     */
    public function testNewVideo()
    {
        $this->assertDatabaseHas('videos', $this->video->getAttributes());

    }

    /**
     * @test
     * @testdox Adding Video with category
     */
    public function testNewVideoWithCategory()
    {
        $category = factory(Category::class)->create();
        $this->video->categories()->sync([$category->id->toString()]);

        $this->assertDatabaseHas('category_video', [
            'video_id' => $this->video->id,
            'category_id' => $category->id
        ]);

    }

    /**
     * @test
     * @testdox Updating Video
     */
    public function testUpdateVideo()
    {


        $this->video->description = null;

        $this->video->save();

        $this->assertNull($this->video->description);
        $this->assertDatabaseHas('videos', $this->video->getAttributes());
    }

    /**
     * @test
     * @testdox Showing Video
     */
    public function testShowVideo()
    {
        $this->assertDatabaseHas('videos', $this->video->getAttributes());
    }

    /**
     * @test
     * @testdox Removing Video
     */
    public function testDestroyVideo()
    {

        $this->video->delete();
        $this->assertSoftDeleted('videos', $this->video->getAttributes());
    }
}
