<?php


namespace Tests\Feature;




use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;
use Mockery\Exception\InvalidCountException;
use Ramsey\Uuid\Uuid;
use Ramsey\Uuid\UuidFactory;
use Ramsey\Uuid\UuidInterface;
use Tests\Stubs\Controllers\CategoryControllerStub;
use Tests\Stubs\Models\CategoryStub;
use Tests\TestCase;

class BasicCrudControllerTest extends TestCase
{
    private $controller;
    private $stub;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        CategoryStub::droptable();
        CategoryStub::createTable();

        $this->controller = new CategoryControllerStub();
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence,
            'is_active' => $this->faker->boolean
        ];

        $this->stub = CategoryStub::create($attr);
    }

    protected function tearDown(): void
    {
        CategoryStub::droptable();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @testdox Test Index Controller
     * @group ignore
     */
    public function testIndex(){
        $response = $this->controller->index();
        $this->assertEquals($response->toArray()["data"][0], $this->stub->toArray());

    }

    /**
     * @test
     * @testdox Test Show Controller
     * @group ignore
     */
    public function testShow(){
        $result = $this->controller->show($this->stub->id);
        $this->assertEquals($result->toArray(), CategoryStub::find(1)->toArray());

    }

    /**
     * @test
     * @testdox Test Store Controller
     * @group ignore
     */
    public function testStore(){

        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence,
            'is_active' => $this->faker->boolean
        ];

        $request = \Mockery::mock(Request::class);
        $request
            ->shouldReceive('all')
            ->atLeast()
            ->once()
            ->andReturn($attr);
        $response = $this->controller->store($request);
        $this->assertEquals($response->toArray(), CategoryStub::find(2)->toArray());

    }


    /**
     * @test
     * @testdox Test Store Controller with null name
     * @group ignore

     */
    public function testStoreNullName(){

        $attr = [
            'name' => null
        ];

        $request = \Mockery::mock(Request::class);

        $request
            ->shouldReceive('all')
            ->once()
            ->andReturn($attr);
        $this->expectException(ValidationException::class);
        $response = $this->controller->store($request);
        $this->assertEquals($response->toArray(), CategoryStub::find(2)->toArray());

    }

    /**
     * @test
     * @testdox Test Store Controller with isActive not boolean
     * @group ignore

     */
    public function testStoreIsActiveNotBoolean(){

        $attr = [
            'is_active' => 'false'
        ];

        $request = \Mockery::mock(Request::class);

        $request
            ->shouldReceive('all')
            ->once()
            ->andReturn($attr);
        $this->expectException(ValidationException::class);
        $response = $this->controller->store($request);
        $this->assertEquals($response->toArray(), CategoryStub::find(2)->toArray());

    }

    /**
     * @test
     * @testdox Test Store Controller with max name
     * @group ignore

     */
    public function testStoreMaxName(){

        $attr = [
            'name' => $this->faker->sentence(258)
        ];

        $request = \Mockery::mock(Request::class);
        $request
            ->shouldReceive('all')
            ->once()
            ->andReturn($attr);
        $this->expectException(ValidationException::class);
        $response = $this->controller->store($request);
        $this->assertEquals($response->toArray(), CategoryStub::find(2)->toArray());

    }

    /**
     * @test
     * @testdox Test Update Controller
     * @group ignore
     */
    public function testUpdate(){

        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence,
            'is_active' => $this->faker->boolean
        ];

        $request = \Mockery::mock(Request::class);

        $request
            ->shouldReceive('all')
            ->atLeast()
            ->once()
            ->andReturn($attr);
        $response = $this->controller->update($request, $this->stub->id);
        $this->assertEquals($response->toArray(), CategoryStub::find(1)->toArray());

    }

    /**
     * @test
     * @testdox Test Update Controller with null name
     * @group ignore

     */
    public function testUpdateNullName(){

        $attr = [
            'name' => null
        ];

        $request = \Mockery::mock(Request::class);

        $request
            ->shouldReceive('all')
            ->once()
            ->andReturn($attr);
        $this->expectException(ValidationException::class);
        $response = $this->controller->update($request, $this->stub->id);
        $this->assertEquals($response->toArray(), CategoryStub::find(2)->toArray());

    }

    /**
     * @test
     * @testdox Test Update Controller with isActive not boolean
     * @group ignore

     */
    public function testUpdateIsActiveNotBoolean(){

        $attr = [
            'is_active' => 'false'
        ];

        $request = \Mockery::mock(Request::class);

        $request
            ->shouldReceive('all')
            ->once()
            ->andReturn($attr);
        $this->expectException(ValidationException::class);
        $response = $this->controller->update($request, $this->stub->id);
        $this->assertEquals($response->toArray(), CategoryStub::find(2)->toArray());

    }

    /**
     * @test
     * @testdox Test Update Controller with max name
     * @group ignore

     */
    public function testUpdateMaxName(){

        $attr = [
            'name' => $this->faker->sentence(258)
        ];

        $request = \Mockery::mock(Request::class);
        $request
            ->shouldReceive('all')
            ->once()
            ->andReturn($attr);
        $this->expectException(ValidationException::class);
        $response = $this->controller->update($request, $this->stub->id);
        $this->assertEquals($response->toArray(), CategoryStub::find(2)->toArray());

    }
    /**
     * @test
     * @testdox Test Destroy Controller
     * @group ignore
     */
    public function testDestroy(){

        $response = $this->controller->destroy($this->stub->id);
        $this->createTestResponse($response)->assertStatus(204);
        $this->assertCount(0, CategoryStub::all());

    }
}
