<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\Video;
use Ramsey\Uuid\Uuid;
use Tests\TestCase;

class VideoControllerTest extends TestCase
{
    private $video;
    private $attr;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->attr = [
            'title' => $this->faker->title,
            'description' => $this->faker->sentence,
            'year_launched' => $this->faker->year,
            'opened' => $this->faker->boolean,
            'duration' => rand(0, 240),
            'rating' => Video::RATING_LIST[array_rand(Video::RATING_LIST)],
            'categories_id' => [factory(Category::class)->create()->id->toString()]
        ];

        $this->video = factory(Video::class)->create();
    }

    /**
     * @test
     * @testdox Index controller
     * @group ignore
     */
    public function testIndex()
    {

        $response = $this->get('api/videos');
        $response
            ->assertJson($response->json())
            ->assertStatus(200)
            ->assertSeeText($this->video->title)
            ->assertSeeText($this->video->year_launched)
            ->assertSeeText($this->video->duration)
            ->assertSeeText($this->video->rating)
            ->assertSeeText($this->video->categories_id);

        $this->assertEquals($response->json('total'), 1);

    }

    /**
     * @test
     * @testdox Store Controller
     * @group ignore
     */
    public function testStore()
    {

        $response = $this->json('POST', route('api.videos.store'), $this->attr);

        $response
            ->assertStatus(201)
            ->assertJson($response->json())
            ->assertSeeText($this->attr['title'])
            ->assertSeeText($this->attr['year_launched'])
            ->assertSeeText($this->attr['duration'])
            ->assertSeeText($this->attr['rating']);
    }

    /**
     * @test
     * @testdox Store Controller Uuid Validation
     * @group ignore
     */
    public function testStoreUuidValidation()
    {

        $response = $this->json('POST', route('api.videos.store'), $this->attr);
        $response->assertStatus(201)
        ->assertJson($response->json());

        $this->assertTrue(Uuid::isValid($response->json('id')));

    }

    /**
     * @test
     * @testdox Store Controller with name Null
     * @group ignore
     */
    public function testStoreTitleNotNull()
    {

        $response = $this->json('POST', route('api.videos.store'), [
            'title' => ''
        ]);
        $response->assertStatus(422)
            ->assertJsonValidationErrors(['title']);

    }

    /**
     * @test
     * @testdox Store Controller with name max
     * @group ignore
     */
    public function testStoreValidationTitleMax()
    {
        $response = $this->json('POST', route('api.videos.store'), [
            'title' => $this->faker->sentence(258)
        ]);

        $response
            ->assertStatus(422)
            ->assertJsonValidationErrors(['title']);

    }


    /**
     * @test
     * @testdox Show Controller
     * @group ignore
     */
    public function testShow()
    {
        $response = $this->json('GET', route('api.videos.show', $this->video->id));
        $response
            ->assertStatus(200)
            ->assertJson($this->video->getAttributes());

    }

    /**
     * @test
     * @testdox Update Controller
     * @group ignore
     */
    public function testUpdate()
    {
        $response = $this->json('PUT', route('api.videos.show', $this->video->id), $this->attr);

        $response->assertStatus(200);
        $this->assertEquals($response->json('title'), $this->attr['title']);

    }

    /**
     * @test
     * @testdox Update Controller  with title null
     * @group ignore
     */
    public function testUpdateTitleNotNull()
    {
        $video = factory(Video::class)->create();
        $response = $this->json('PUT', route('api.videos.show', $video->id), [
            'title' => '',

        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['title']);

    }

    /**
     * @test
     * @testdox Update Controller  with description null
     * @group ignore
     */
    public function testUpdateDescriptionNull()
    {
        $video = factory(Video::class)->create();
        $response = $this->json('PUT', route('api.videos.show', $video->id), [
            'title' => $video->title,
            'year_launched' => $video->year_launched,
            'opened' => $video->opened,
            'duration' => $video->duration,
            'rating' => Video::RATING_LIST[array_rand(Video::RATING_LIST)],
            'categories_id' => [factory(Category::class)->create()->id->toString()],
            'description' => null
        ]);

        $response->assertStatus(200);
        $this->assertNull($response->json('description'));
    }

    /**
     * @test
     * @testdox Destroy Controller
     * @group ignore
     */
    public function testDestroy()
    {
        $video = factory(Video::class)->create();
        $response = $this->json('DELETE', route('api.videos.destroy', $video->id));

        $response->assertStatus(204)
            ->assertNoContent();

    }
}
